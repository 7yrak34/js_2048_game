{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/helpers/getRandomNumber.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\nfunction $be8deb1d37936660$export$eab19c48dcb6310d(min, max) {\n    return Math.floor(min + Math.random() * (max + 1 - min));\n}\n\n\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = Array.from({\n        length: $a5fd07fa01589658$var$Game.GRID_SIZE\n    }, ()=>{\n        return Array($a5fd07fa01589658$var$Game.GRID_SIZE).fill(0);\n    })){\n        this.state = initialState;\n        this.score = this.state.reduce((sum, row)=>{\n            let cellsSum = 0;\n            for (const cell of row)cellsSum += cell;\n            return sum + cellsSum;\n        }, 0);\n    }\n    static GRID_SIZE = 4;\n    static WIN_NUMBER = 2048;\n    static STATUS_IDLE = \"idle\";\n    static STATUS_PLAYING = \"playing\";\n    static STATUS_WIN = \"win\";\n    static STATUS_LOSE = \"lose\";\n    static PUSH_METHOD = \"push\";\n    static UNSHIFT_METHOD = \"unshift\";\n    static MOVE_DIRECTIONS = {\n        LEFT: \"left\",\n        RIGHT: \"right\",\n        UP: \"up\",\n        DOWN: \"down\"\n    };\n    status = $a5fd07fa01589658$var$Game.STATUS_IDLE;\n    moveCells(matrix, isReverseDirection = false) {\n        let sum = 0;\n        const result = matrix.map((row)=>{\n            const filteredRow = row.filter((cell)=>cell !== 0);\n            if (isReverseDirection) filteredRow.reverse();\n            const [mergedCells, mergedSum] = this.mergeNumbers(filteredRow);\n            sum += mergedSum;\n            while(mergedCells.length < $a5fd07fa01589658$var$Game.GRID_SIZE)mergedCells.push(0);\n            return isReverseDirection ? mergedCells.reverse() : mergedCells;\n        });\n        return [\n            result,\n            sum\n        ];\n    }\n    moveLeft() {\n        const [newState, mergedSum] = this.moveCells(this.state);\n        this.updateState(newState, this.score + mergedSum);\n    }\n    moveRight() {\n        const [newState, mergedSum] = this.moveCells(this.state, true);\n        this.updateState(newState, this.score + mergedSum);\n    }\n    moveUp() {\n        const rotatedState = this.rotateMatrix(this.state);\n        const [movedState, mergedSum] = this.moveCells(rotatedState);\n        const newState = this.rotateMatrix(movedState);\n        this.updateState(newState, this.score + mergedSum);\n    }\n    moveDown() {\n        const rotatedState = this.rotateMatrix(this.state);\n        const [movedState, mergedSum] = this.moveCells(rotatedState, true);\n        const newState = this.rotateMatrix(movedState);\n        this.updateState(newState, this.score + mergedSum);\n    }\n    isMoveAvailable() {\n        return this.state.some((row, rowIndex)=>{\n            return row.some((cell, cellIndex)=>{\n                if (cell === 0) return true;\n                if (cellIndex !== row.length - 1 && cell === this.state[rowIndex][cellIndex + 1]) return true;\n                if (rowIndex !== this.state.length - 1 && cell === this.state[rowIndex + 1][cellIndex]) return true;\n                return false;\n            });\n        });\n    }\n    updateState(newState, newScore) {\n        if (this.hasStateChanged(newState) && this.status === $a5fd07fa01589658$var$Game.STATUS_PLAYING) {\n            this.state = newState;\n            this.score = newScore;\n            this.addRandomCell();\n        }\n        if (this.state.some((row)=>row.some((cell)=>cell === $a5fd07fa01589658$var$Game.WIN_NUMBER))) {\n            this.status = $a5fd07fa01589658$var$Game.STATUS_WIN;\n            return;\n        }\n        if (!this.isMoveAvailable()) this.status = $a5fd07fa01589658$var$Game.STATUS_LOSE;\n    }\n    rotateMatrix(matrix) {\n        const rotatedMatrix = [];\n        for(let cellIndex = 0; cellIndex < $a5fd07fa01589658$var$Game.GRID_SIZE; cellIndex++){\n            const column = [];\n            for(let rowIndex = 0; rowIndex < $a5fd07fa01589658$var$Game.GRID_SIZE; rowIndex++)column.push(matrix[rowIndex][cellIndex]);\n            rotatedMatrix.push(column);\n        }\n        return rotatedMatrix;\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS_PLAYING;\n        this.addRandomCell();\n        this.addRandomCell();\n    }\n    restart() {\n        this.state = Array.from({\n            length: $a5fd07fa01589658$var$Game.GRID_SIZE\n        }, ()=>{\n            return Array($a5fd07fa01589658$var$Game.GRID_SIZE).fill(0);\n        });\n        this.status = $a5fd07fa01589658$var$Game.STATUS_PLAYING;\n        this.score = 0;\n        this.addRandomCell();\n        this.addRandomCell();\n    }\n    addRandomCell() {\n        const availableCells = [];\n        this.state.forEach((row, rowIndex)=>{\n            row.forEach((cell, cellIndex)=>{\n                if (cell === 0) availableCells.push({\n                    indexRow: rowIndex,\n                    indexCell: cellIndex\n                });\n            });\n        });\n        if (!availableCells.length) return;\n        const randomIndex = (0, $be8deb1d37936660$export$eab19c48dcb6310d)(0, availableCells.length - 1);\n        const { indexRow: indexRow, indexCell: indexCell } = availableCells[randomIndex];\n        const newCellValue = Math.random() < 0.1 ? 4 : 2;\n        this.state[indexRow].splice(indexCell, 1, newCellValue);\n    }\n    mergeNumbers(array) {\n        const result = [];\n        let mergedSum = 0;\n        for(let i = 0; i < array.length; i++){\n            const cell = array[i];\n            const nextCell = array[i + 1];\n            if (cell === nextCell) {\n                result.push(cell + nextCell);\n                mergedSum += cell + nextCell;\n                i++;\n            } else result.push(cell);\n        }\n        return [\n            result,\n            mergedSum\n        ];\n    }\n    hasStateChanged(newState) {\n        const isChanged = this.state.some((row, rowIndex)=>{\n            return row.some((cell, cellIndex)=>{\n                return cell !== newState[rowIndex][cellIndex];\n            });\n        });\n        return isChanged;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst [...$09e991522ca7e64e$var$cells] = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nfunction $09e991522ca7e64e$var$hideMessages() {\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) $09e991522ca7e64e$var$game.restart();\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        document.addEventListener(\"keydown\", (key)=>{\n            if ($09e991522ca7e64e$var$game.status === $a5fd07fa01589658$exports.STATUS_PLAYING) {\n                switch(key.key){\n                    case \"ArrowLeft\":\n                        $09e991522ca7e64e$var$game.moveLeft();\n                        break;\n                    case \"ArrowRight\":\n                        $09e991522ca7e64e$var$game.moveRight();\n                        break;\n                    case \"ArrowUp\":\n                        $09e991522ca7e64e$var$game.moveUp();\n                        break;\n                    case \"ArrowDown\":\n                        $09e991522ca7e64e$var$game.moveDown();\n                        break;\n                }\n                $09e991522ca7e64e$var$displayOnField($09e991522ca7e64e$var$game.state);\n            }\n        });\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n    }\n    $09e991522ca7e64e$var$hideMessages();\n    $09e991522ca7e64e$var$displayOnField($09e991522ca7e64e$var$game.state);\n});\nfunction $09e991522ca7e64e$var$displayOnField(matrix) {\n    for(let rowIndex = 0; rowIndex < matrix.length; rowIndex++)for(let cellIndex = 0; cellIndex < matrix[rowIndex].length; cellIndex++){\n        const matrixCell = matrix[rowIndex][cellIndex];\n        const cell = $09e991522ca7e64e$var$cells[$a5fd07fa01589658$exports.GRID_SIZE * rowIndex + cellIndex];\n        // instead of 0 we add empty string to the cell\n        const value = matrixCell === 0 ? \"\" : matrixCell;\n        if (cell.textContent !== value.toString()) {\n            cell.textContent = value;\n            cell.setAttribute(\"data-value\", matrixCell);\n        }\n    }\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.score;\n    switch($09e991522ca7e64e$var$game.status){\n        case $a5fd07fa01589658$exports.STATUS_WIN:\n            $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n            break;\n        case $a5fd07fa01589658$exports.STATUS_LOSE:\n            $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n            break;\n    }\n}\n\n\n//# sourceMappingURL=index.2f56d89e.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.button');\nconst score = document.querySelector('.game-score');\nconst [...cells] = document.querySelectorAll('.field-cell');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nfunction hideMessages() {\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n}\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('restart')) {\n    game.restart();\n  }\n\n  if (button.classList.contains('start')) {\n    game.start();\n\n    document.addEventListener('keydown', (key) => {\n      if (game.status === Game.STATUS_PLAYING) {\n        switch (key.key) {\n          case 'ArrowLeft':\n            game.moveLeft();\n            break;\n\n          case 'ArrowRight':\n            game.moveRight();\n            break;\n\n          case 'ArrowUp':\n            game.moveUp();\n            break;\n\n          case 'ArrowDown':\n            game.moveDown();\n            break;\n        }\n\n        displayOnField(game.state);\n      }\n    });\n\n    button.classList.remove('start');\n    button.textContent = 'Restart';\n    button.classList.add('restart');\n  }\n\n  hideMessages();\n  displayOnField(game.state);\n});\n\nfunction displayOnField(matrix) {\n  for (let rowIndex = 0; rowIndex < matrix.length; rowIndex++) {\n    for (let cellIndex = 0; cellIndex < matrix[rowIndex].length; cellIndex++) {\n      const matrixCell = matrix[rowIndex][cellIndex];\n      const cell = cells[Game.GRID_SIZE * rowIndex + cellIndex];\n      // instead of 0 we add empty string to the cell\n      const value = matrixCell === 0 ? '' : matrixCell;\n\n      if (cell.textContent !== value.toString()) {\n        cell.textContent = value;\n        cell.setAttribute('data-value', matrixCell);\n      }\n    }\n  }\n\n  score.textContent = game.score;\n\n  switch (game.status) {\n    case Game.STATUS_WIN:\n      messageWin.classList.remove('hidden');\n      break;\n\n    case Game.STATUS_LOSE:\n      messageLose.classList.remove('hidden');\n      break;\n  }\n}\n","'use strict';\nimport { getRandomNumber } from '../helpers/getRandomNumber.js';\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = Array.from({ length: Game.GRID_SIZE }, () => {\n      return Array(Game.GRID_SIZE).fill(0);\n    }),\n  ) {\n    this.state = initialState;\n\n    this.score = this.state.reduce((sum, row) => {\n      let cellsSum = 0;\n\n      for (const cell of row) {\n        cellsSum += cell;\n      }\n\n      return sum + cellsSum;\n    }, 0);\n  }\n\n  static GRID_SIZE = 4;\n  static WIN_NUMBER = 2048;\n  static STATUS_IDLE = 'idle';\n  static STATUS_PLAYING = 'playing';\n  static STATUS_WIN = 'win';\n  static STATUS_LOSE = 'lose';\n  static PUSH_METHOD = 'push';\n  static UNSHIFT_METHOD = 'unshift';\n  static MOVE_DIRECTIONS = {\n    LEFT: 'left',\n    RIGHT: 'right',\n    UP: 'up',\n    DOWN: 'down',\n  };\n\n  status = Game.STATUS_IDLE;\n\n  moveCells(matrix, isReverseDirection = false) {\n    let sum = 0;\n\n    const result = matrix.map((row) => {\n      const filteredRow = row.filter((cell) => cell !== 0);\n\n      if (isReverseDirection) {\n        filteredRow.reverse();\n      }\n\n      const [mergedCells, mergedSum] = this.mergeNumbers(filteredRow);\n\n      sum += mergedSum;\n\n      while (mergedCells.length < Game.GRID_SIZE) {\n        mergedCells.push(0);\n      }\n\n      return isReverseDirection ? mergedCells.reverse() : mergedCells;\n    });\n\n    return [result, sum];\n  }\n\n  moveLeft() {\n    const [newState, mergedSum] = this.moveCells(this.state);\n\n    this.updateState(newState, this.score + mergedSum);\n  }\n\n  moveRight() {\n    const [newState, mergedSum] = this.moveCells(this.state, true);\n\n    this.updateState(newState, this.score + mergedSum);\n  }\n\n  moveUp() {\n    const rotatedState = this.rotateMatrix(this.state);\n    const [movedState, mergedSum] = this.moveCells(rotatedState);\n    const newState = this.rotateMatrix(movedState);\n\n    this.updateState(newState, this.score + mergedSum);\n  }\n\n  moveDown() {\n    const rotatedState = this.rotateMatrix(this.state);\n    const [movedState, mergedSum] = this.moveCells(rotatedState, true);\n    const newState = this.rotateMatrix(movedState);\n\n    this.updateState(newState, this.score + mergedSum);\n  }\n\n  isMoveAvailable() {\n    return this.state.some((row, rowIndex) => {\n      return row.some((cell, cellIndex) => {\n        if (cell === 0) {\n          return true;\n        }\n\n        if (\n          cellIndex !== row.length - 1 &&\n          cell === this.state[rowIndex][cellIndex + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          rowIndex !== this.state.length - 1 &&\n          cell === this.state[rowIndex + 1][cellIndex]\n        ) {\n          return true;\n        }\n\n        return false;\n      });\n    });\n  }\n\n  updateState(newState, newScore) {\n    if (this.hasStateChanged(newState) && this.status === Game.STATUS_PLAYING) {\n      this.state = newState;\n      this.score = newScore;\n      this.addRandomCell();\n    }\n\n    if (\n      this.state.some((row) => row.some((cell) => cell === Game.WIN_NUMBER))\n    ) {\n      this.status = Game.STATUS_WIN;\n\n      return;\n    }\n\n    if (!this.isMoveAvailable()) {\n      this.status = Game.STATUS_LOSE;\n    }\n  }\n\n  rotateMatrix(matrix) {\n    const rotatedMatrix = [];\n\n    for (let cellIndex = 0; cellIndex < Game.GRID_SIZE; cellIndex++) {\n      const column = [];\n\n      for (let rowIndex = 0; rowIndex < Game.GRID_SIZE; rowIndex++) {\n        column.push(matrix[rowIndex][cellIndex]);\n      }\n\n      rotatedMatrix.push(column);\n    }\n\n    return rotatedMatrix;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.STATUS_PLAYING;\n    this.addRandomCell();\n    this.addRandomCell();\n  }\n\n  restart() {\n    this.state = Array.from({ length: Game.GRID_SIZE }, () => {\n      return Array(Game.GRID_SIZE).fill(0);\n    });\n\n    this.status = Game.STATUS_PLAYING;\n    this.score = 0;\n    this.addRandomCell();\n    this.addRandomCell();\n  }\n\n  addRandomCell() {\n    const availableCells = [];\n\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        if (cell === 0) {\n          availableCells.push({ indexRow: rowIndex, indexCell: cellIndex });\n        }\n      });\n    });\n\n    if (!availableCells.length) {\n      return;\n    }\n\n    const randomIndex = getRandomNumber(0, availableCells.length - 1);\n    const { indexRow, indexCell } = availableCells[randomIndex];\n    const newCellValue = Math.random() < 0.1 ? 4 : 2;\n\n    this.state[indexRow].splice(indexCell, 1, newCellValue);\n  }\n\n  mergeNumbers(array) {\n    const result = [];\n    let mergedSum = 0;\n\n    for (let i = 0; i < array.length; i++) {\n      const cell = array[i];\n      const nextCell = array[i + 1];\n\n      if (cell === nextCell) {\n        result.push(cell + nextCell);\n        mergedSum += cell + nextCell;\n        i++;\n      } else {\n        result.push(cell);\n      }\n    }\n\n    return [result, mergedSum];\n  }\n\n  hasStateChanged(newState) {\n    const isChanged = this.state.some((row, rowIndex) => {\n      return row.some((cell, cellIndex) => {\n        return cell !== newState[rowIndex][cellIndex];\n      });\n    });\n\n    return isChanged;\n  }\n}\n\nmodule.exports = Game;\n","export function getRandomNumber(min, max) {\n  return Math.floor(min + Math.random() * (max + 1 - min));\n}\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","constructor","initialState","Array","from","length","GRID_SIZE","fill","state","score","reduce","sum","row","cellsSum","cell","WIN_NUMBER","STATUS_IDLE","STATUS_PLAYING","STATUS_WIN","STATUS_LOSE","PUSH_METHOD","UNSHIFT_METHOD","MOVE_DIRECTIONS","LEFT","RIGHT","UP","DOWN","status","moveCells","matrix","isReverseDirection","map","filteredRow","filter","reverse","mergedCells","mergedSum","mergeNumbers","push","moveLeft","newState","updateState","moveRight","moveUp","rotatedState","rotateMatrix","movedState","moveDown","isMoveAvailable","some","rowIndex","cellIndex","newScore","hasStateChanged","addRandomCell","rotatedMatrix","column","getScore","getState","getStatus","start","restart","availableCells","forEach","indexRow","indexCell","randomIndex","Math","floor","min","random","max","newCellValue","splice","array","result","i","nextCell","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$cells","querySelectorAll","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$displayOnField","matrixCell","value","textContent","toString","setAttribute","classList","remove","addEventListener","contains","key","add"],"version":3,"file":"index.2f56d89e.js.map"}